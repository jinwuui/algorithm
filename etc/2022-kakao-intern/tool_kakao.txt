문제 유형 리스트(안 풀릴때 아이디어 참고하기)
완전탐색 / BFS / DFS / LCS / 큐,스택,덱 / 문자열 / 인접리스트 / 인접행렬 / DP / 그리디 / 브루트포스 / 정렬 / 정수론 / 트리
이분탐색 / 시뮬레이션 / 순열,조합 / 백트래킹 / Map,Set,Hash / 서로소 집합(DisJoint Set) / MST(Minimum Spanning Tree)
다익스트라 / 플로이드-와샬 / 벨만-포드

수학 / 구현 / 세그먼트 트리 / 기하학 / 누적합 / 느리게갱신되는세그먼트트리 / 파싱 / 정규표현식 / 구현 / 스위핑 / 분리집합 / 분할정복
조합론 / 배낭문제 / 투포인터 / 애드 혹 /

512MB = 1.2 억개의 int
1억 = 1초




# string 표준 입출력 시에 한 줄로 받기 # 공백이 포함된 문자열 # getline
이거 전에 cin >> int값;
하면 cin.ignore(); 해줘야 str에 잘 들어감
getline(cin, str);




# 초기화 # memset # 배열은 전역에 선언하면 따로 초기화가 된다고함.
int a[20];
memset(a, 0, sizeof a);
memset(a, -1, sizeof a);




# 초기화 # fill
int tmp[20] = {};

int a[21];
fill(a, a + 21, 0);

int b[21][21];
for (int i = 0; i < 21; i++) {
	fill(b[i], b[i] + 21, 0);
}




# 실수 비교 # compare double # compare float
if (abs(a - b) < 1e-12) cout << "same\n";

주의) a == b 처럼 등호를 사용하면 안됨.



# debug Array # 디버그 함수
void debug(int arr[], int len) {
	for (int i = 0; i < len; i++)
		printf("[%d] ", arr[i]);
	printf("\n");
}




# 두 값을 차례대로 비교할때 pair 자료형을 그냥 비교할 수 있음 -> first 먼저 비교하고 무승부면 second도 비교하는 듯
bool compare(Person p1, Person p2) {
	return p1.ageidx < p2.ageidx;
}




# vector compare # 벡터 비교
vector<type> v1, v2;
...
if (v1 == v2) // 두 벡터 안의 원소가 같음

<= >= < > 다 쓸 수 있음




# vector copy # 벡터 복사
vector<int> v1;
vector<int> v2;
...
copy(v1.begin(), v1.end(), v2.begin());
v1의 내용을 v2로 복사

vector<int> tmp = v1;
v1의 내용을 tmp로 복사

vector<int> tmp2(v1);
v1의 내용을 tmp2로 복사

copy.assign(origin.begin(), origin.end())
origin의 내용을 copy로 복사


# compare 함수 # compare method # compare 주의사항 # compare reference # compare 주소 인자
int idx;
bool compare(vector<int> v1, vector<int> v2) {	// 시간복잡도 O(N) -> 벡터를 파라미터로 그냥 보내면 복사해야해서 복사에 걸리는 시간
	return v1[idx] > v2[idx];
}

bool compare(vector<int> &v1, vector<int> &v2) {	// 시간복잡도 O(1) -> 벡터의 복사본을 사용하는게 아닌 원본을 사용함
	return v1[idx] > v2[idx];
}




# list # 연결 리스트 # 이중 연결 리스트
list<int> li = {1, 2};
li.push_front(10); li.push_back(10);
li.pop_front(); li.pop_back();

list<int>::iterator t = li.begin();
t++; // t 전진
li.insert(t, 6);	// t가 가리키는 곳 '앞에' 6 삽입
t = li.erase(t); // t 가 가리키는 값을 제거
for (auto i : li) cout << i << ' ';
for (list<int>::iterator it = li.begin(); it != li.end(); it++)
	cout << *it << ' ';

반복자

begin(): beginning iterator 반환
end(): end iterator 반환
삽입

push_front(element): 리스트 맨 앞에 원소 추가
push_back(element): 리스트 맨 뒤에 원소 추가
insert(iterator, element): iterator가 가리키는 부분의 앞에 원소 추가
삭제

pop_front(): 리스트 맨 앞의 원소 삭제
pop_back(): 리스트 맨 뒤의 원소 삭제
erase(iterator): iterator가 가리키는 부분의 원소 삭제
조회

*iterator: iterator가 가리키는 원소에 접근
front(): 첫번째 원소 반환
back(): 마지막 원소 반환
기타

empty(): 리스트가 비어있는지 여부
size(): 리스트 사이즈 반환





# %02d 숫자 자리수 맞출 때 # 숫자 자리수 # printf 자리수 # 입출력
printf("%d%02d\n", mod, div);

형식 지정자)
%lld // 부호 있는 long long
%.3f // 소수점 이하 세번째 자리 까지만 출력
%6d // 출력을 6자리로 지정
%06d // 출력을 6자리로 지정하고, 남는 자리는 0으로 채움




# 같은 표현 # same expression # 꿀팁
int mod = n % h + h * (n % h == 0);
int mod = n % h == 0 ? h : n % h;




# upper_bound # lower_bound # 이진탐색 # 이진탐색 형제들
upper_bound(arr, arr + len, val), lower_bound(arr, arr + len, val)
// val 보다 작거나 같은 값의 시작 인덱스 (오 -> 왼) = upper_bound
// val 보다 크거나 같은 값의 시작 인덱스 (왼 -> 오) = lower_bound




# 반올림 round # 올림 ceil # 내림 floor




# 코딩 주의 사항!!
1. 전역 변수에 집착하지 말자, 전역 + 지역 적절히 사용!
2. 반복문 사용할때 기준이 되는 친구를 항상 잘 잡자!
3. overflow 주의하기!
4. rep 쓸거면 주의해서 쓰기




# 1씩 증가하는 구조체 만들기 # iota
void iota(ForwardIterator first, ForwardIterator last, T value);
예)
int buf[1000];
iota(buf, buf + 1000, 0);




# heap # priority_queue
heap은 priority_queue<자료형> 을 사용
기본적으로 최대값이 top에 위치함

최소힙은 -를 붙여서 사용해도 좋음
따로 필요하다면
min heap : priority_queue< int, vector<int>, greater<int> > pq;
max heap : priority_queue< int, vector<int>, less<int> > pq;

아래는 class 사용시 예제
priority_queue< Custom, vector<Custom>,  CompareFunctionObject > pq;

// CompareFunctionObject 의 형태
// 오름차순 정렬
struct cmp{
    bool operator()(Custom t, Custom u){
        return t.value > u.value;
    }
};

// 아래와 같이 class로도 작성이 가능합니다.
class CompareFunctionObject
{
public:
	int operator()(Custom t, Custom u){
		return t.value > u.value;
	}
};

함수 종류: push(value) top() size() empty() pop() ...
pair 사용 min heap:  priority_queue<pii, vector<pii>, greater<pii> > heap;




# multiset # set
multiset<자료형> 은 "중복된 key값" 을 허용하는 set 컨테이너
set, multiset 둘 다 삽입과 동시에 정렬됨
(개사기네)

# set 원소 찾기 # set find
존재 안함 set.find(value) == set.end()
존재함 set.find(value) != set.end()

# set index 찾기 # set distance # set 거리 # set 인덱스
set<int>::iterator it = st.begin();
set<int>::iterator it2 = st.find(buf[i]);
int x = distance(it, it2);




# string to int # string to float # string to long # string to long long # string to double
stoi(str);
stoi = string to int
stof = string to float
stol = string to long
stod = string to double
stoll = string to long long




# int to string # to_string()
int val = 1234; string str = to_string(val);




# char to int # type casting
char tmp = '1'; int val = tmp - '0';




# 2차원 벡터 선언
vector<vector<int>> v8(n, vector<int>(m));
vector<vector<int>> v8(n, vector<int>(m));




# map # max_element
bool comp(pii p1, pii p2) {
	return p1.second < p2.second;
	return p1 < p2;
}
...
	map<int, int> m;
...

	cout << max_element(m.begin(), m.end(), comp) -> first;
	cout << *max_element(m.begin(), m.end(), comp); // 이건 왜 안 되지..?




# map 순회
map<string, int>::iterator i;
for (i = m.begin(); i != m.end(); i++) {
	cout << i -> first << i -> second << endl;
}




# string.find # 문자 검색 # 문자열 검색
int pos = str.find(c, idx, count);
int pos = str.find("something", idx, count);
(찾는 문자(열), 검색 시작 위치, 시작 위치부터 찾는 개수)
못 찾으면 pos == string::npos 가 됨

예)
str.find("hello!");
if (str.find("hello!") != string::npos) {
	// 문자열이 있을 경우
}




# string.strncmp() # string.strcmp() # 문자열 비교
1. str1 < str2 인 경우에는 음수 반환
2. str1 > str2 인 경우에는 양수 반환
3. str1 == str2 인 경우에는 0을 반환 합니다.

int strcmp(const char* str1, const char* str2);
첫번째 매개변수 str1 : 비교할 문자열1
두번재 매개변수 str2 : 비교할 문자열2

int strncmp(const char* str1, const char* str2, size_t n);
첫번째 매개변수 str1 : 비교할 문자열1
두번재 매개변수 str2 : 비교할 문자열2
세번째 매개변수 n : 비교할 문자열 길이  




# sort # 오름차순 # 내림차순
내림차순 sort(a, a + n, greater<int>());
오름차순(기본값) sort(a, a + n, less<int>());
동일한 우선순위 원소간 상대적인 순서를 보존할 때 => stable_sort();




# 중복 제거 # unique # 벡터 중복 제거 # 배열 중복 제거
// a는 중복된 숫자가 들어가 있는 배열 (or 벡터도 가능)
sort(a, a+n);
n = (int)(unique(a, a+n) - a);
for (int i = 0; i < n; i++)
	printf("%d ",a[i]);

sort(v.begin(), v.end());
vector<int>::iterator it = unique(v.begin(), v.end());
v.resize(distance(v.begin(), it));

v.erase(unique(v.begin(), v.end()), v.end());




# tuple # 튜플 # 값 3개 이상 저장
tuple<int, int, char> t;
t = make_tuple(1, 2, 't');
get<0> (t);
get<1> (t);
get<2> (t);




# next_permutaion # prev_permutation # 순열
sort로 오름 또는 내림차순으로 만들어서 사용할 것

****_permutation(시작점, 종료점);
next_permutation: 현재 나와 있는 수열에서 인자로 넘어간 범위에 해당하는 다음 순열을 구하고 true를 반환한다.
다음 순열이 없다면(다음에 나온 순열이 순서상 이전 순열보다 작다면) false를 반환.

prev_permutation: 현재 나와 있는 수열에서 인자로 넘어간 범위에 해당하는 이전 순열을 구하고 true를 반환한다.
이전 순열이 없다면(다음에 나온 순열이 순서상 이전 순열보다 크다면) false를 반환.


# 중복이 있는 원소들의 경우
vector<int> v;

// 0 1 1 대입
v.push_back(0);
v.push_back(1);
v.push_back(1);

// 정렬
sort(v.begin(), v.end());

//순열
do {
	// 출력
	for(int i = 0; i < v.size(); i++) {
		printf("%d ", v[i]);
	}
	printf("\n");
} while(next_permutation(v.begin(), v.end()));


# 조합
원리 : [1 2 3 4 5 6] 이고 [0 0 1 1 1 1] 이면 원하는 결과는 [3 4 5 6] 이다.
순열과 달리 원본 배열은 sort 안해도 되는듯 함

vector<int> v;

for (int i = 0; i < n; i++)
{
	v.push_back(i + 1);
}

// 0, 1을 넣어 임시 조합 생성
vector<int> tmpv;

for (int i = 0; i < k; i++)
{
	tmpv.push_back(1);
}

for (int i = 0; i < v.size() - k; i++)
{
	tmpv.push_back(0);
}

sort(tmpv.begin(), tmpv.end());

do
{
	for (int i = 0; i < tmpv.size(); i++)
	{
		if (tmpv[i] == 1)
		{ // 실제값 출력
			cout << v[i] << " ";
		}
	}

	cout << endl;

} while (next_permutation(tmpv.begin(), tmpv.end()));




# vector 초기화 # vector reset
vector<long long> ans(N, K / N); // 두번째 파라미터로 초기화




# 구조체 # 구조체는 초기화가 안돼요~
구식 컴파일러(채점도 마찬가지인듯? gcc?)에서는 구조체 사용할 때 중요한건 초기화 시켜주자..!
BOJ 5052 틀렸습니다 2번 -> bool 변수 초기화 안해줘서...




# 최대공약수 # 최소공배수 # gcd # lcm
int gcd(int a, int b) {
	if (a > b) gcd(b, a);
	if (a == 0) return b;
	return gcd(b % a, a);
}
int gcd(int x, int y){
    if(x % y==0) return y;
    else return gcd(y,x%y);
}
int gcd(int x, int y) {
	if (x > y) return gcd(y, x);
	if (y % x == 0) return x;
	return gcd(y % x, x);
}
int lcm = a * b / gcd();




# 조합 # nCr # 파스칼의 삼각형
int dp[31][31];
ll ncr(int n, int r) {
	if (r > n) return ncr(r, n);
	if (n == r || r == 0) return 1;
	if (dp[n][r]) return dp[n][r];
	else return dp[n][r] = ncr(n - 1, r - 1) + ncr(n - 1, r);
}




# 에라토스테네스의 체 # 소수 구하기
bool buf[n]; // buf를 전역변수로 놓거나 초기화 시켜야함 // 0 -> 소수, 1 -> 소수X
buf[1] = 1;
for (int i = 2; i * i <= n; i++) {
	if (!buf[i]) {
		for (int j = i + i; j <= n; j += i) {
			buf[j] = 1;
		}
	}
}




# string to char array # 문자열을 문자 배열로 변환
str.c_str()




# array to number # atoi # atol # atoll 
string str = "1234"; int val = atoi(str.c_str());
atol() = char array to long
atoll() = char array to long long
long int atol(const char *string);
long long int atoll(const char *string);




# 두점의 거리 # 빗변의 길이 # 피타고라스의 정리 # STL
double hypot(double x, double y); 직각 삼각형의 빗변의 길이 계산
x = 변1, y = 변2




# LCS # Longest Common Substring # 최장 공통 부분 수열
				{ 0									if i = 0 or j = 0
LCS(xi, yj) = 	{ LCS(xi-1, yj-1) + 1				if xi = yj
				{ max(LCS(xi, yj-1), LCS(xi-1, yj)) if xi != yj

ex)
string s1, s2;
...
for (int i = 1; i <= s1.length(); i++) {
	for (int j = 1; j <= s2.length(); j++) {
		if (s1[i - 1] == s2[j - 1]) buf[i][j] = buf[i - 1][j - 1] + 1;
		else buf[i][j] = max(buf[i - 1][j], buf[i][j - 1]);
	}
}




# 백트래킹 # DFS만 고집하지 않기
int n, maxv = -1e9 - 1, minv = 1e9 + 1, buf[20], a, b, c, d;
void func(int cnt, int val) {
	if (cnt == n - 1) {
		minv = min(minv, val); maxv = max(maxv, val);
		return;
	}
	if (a) { a--; func(cnt + 1, val + buf[cnt + 1]); a++; }
	if (b) { b--; func(cnt + 1, val - buf[cnt + 1]); b++; }
	if (c) { c--; func(cnt + 1, val * buf[cnt + 1]); c++; }
	if (d) { d--; func(cnt + 1, val / buf[cnt + 1]); d++; }
}
int main() {
	cin >> n;
	rep(i, n) cin >> buf[i];
	cin >> a >> b >> c >> d;
	func(0, buf[0]);
	cout << maxv << endl << minv;
	return 0;
}




# 원주율 # PI # 3.141592
M_PI -> 상수가 정의되어 있음




# 그래프 노드번호가 너무 크다? 순차적이지 않다면 --> 해싱 사용
ex) 노드번호가 1000000000 -> 해싱해서 뭐 3? 4? 로 바꾸면 될 듯함.




# 서로소 집합(DisJoint Set)
int buf[300];
int findSet(int val) {	// 해당 인덱스의 대장을 찾아라!
	if (val == buf[val]) return val;
	return buf[val] = findSet(buf[val]);	// findSet 하고 돌아올때마다 다시 설정해줌
	// return findSet(buf[idx]);			// 이건 느림
}
void unionSet(int a, int b) {	// a와 b를 하나로 합쳐주세요
	int ap = findSet(a), bp = findSet(b);
	if (ap == bp) return;

	buf[ap] = bp; // 대장은 bp
}




# MST(Minimum Spanning Tree)
int n, e, buf[11111];
vector<pair<int, pii>> v;

int findSet(int val) { ... }
void unionSet(int a, int b) { ... }

int main() {
	iota(buf, buf + 11111, 0);
	cin >> n >> e;
	rep(i, e) {
		int a, b, c;
		cin >> a >> b >> c;
		v.push_back({c, {a, b}});
		// c = 가중치
		// a,b = 정점
	}

	// 가중치가 작은 순서대로 간선을 정렬
	sort(v.begin(), v.end());

	int cnt = 0, idx = 0, ans = 0;
	while (cnt < n - 1) {
		int w = v[idx].first;
		int a = v[idx].second.first;
		int b = v[idx].second.second;

		// 이미 같은 소속이 아니라면 선(w 가중치)을 연결함
		if (findSet(a) != findSet(b)) {
			unionSet(a, b);
			cnt++;
			ans += w;
		}
		idx++;
	}
	cout << ans;
	
	return 0;
}




# 배열에 들어있는 수가 다 같은지 확인 # all element is same
if(*max_element(a,a+n) == *min_element(a,a+n)) break; // 같음

OR

sort(arr, arr + n);
if (arr[0] == arr[n - 1])
	// 같음




# 큰 소수 판별법 # 밀러-라빈 소수판별법
소수인지 확인하고 싶은 수를 N이라고 하고,
N-1을 2s·d (d는 홀수)꼴로 분해한다. 만약 어떤 양의 정수 a와 0 ≤ r ≤ s − 1인 어떤 r에 대하여

a ^ d = 1 (mod N)

OR

a ^ (2 ^ r * d) = -1 (mod N)

이라면 N은 확률적 소수이다. 만약 위 두 식이 모두 성립하지 않으면, N은 합성수이다.
int 는 2, 7, 61을 통과하면 되고, long long 범위는 37 까지의 소수를 통과하면 됨




# 골드바흐의 추측
골드바흐의 강한 추측: 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다
골드바흐의 약한 추측: 5보다 큰 모든 홀수는 세 소수의 합으로 나타낼 수 있다.

=> 2보다 큰 모든 정수는 세 소수의 합으로 나타낼 수 있다.




# 단어 분리 # split
vector<string> split(string s, char deli) {
	istringstream iss(s);
	string sb; vector<string> ret;
	ret.clear();
	while (getline(iss, sb, deli)) ret.push_back(sb);
	return ret;
}




# 다익스트라
int n, m, s, e;
vector<pii> v[2000];
int ans[2000];

int main() {
	fill(ans, ans + 2000, 1e9);
	cin >> n >> m;
	rep(i, m) {
		int a, b, w;
		cin >> a >> b >> w;
		v[a].push_back({w, b});
	}
	cin >> s >> e;
	ans[s] = 0;
	priority_queue<pii, vector<pii>, greater<pii>> pq;
	pq.push({0, s});
	while (!pq.empty()) {
		pii cur = pq.top(); pq.pop();

		if (ans[cur.ND] < cur.W) continue;

		for (int i = 0; i < v[cur.ND].size(); i++) {
			pii now = v[cur.ND][i];

			if (ans[now.ND] > ans[cur.ND] + now.W) {
				ans[now.ND] = ans[cur.ND] + now.W;
				pq.push({ans[now.ND], now.ND});
			}
		}
	}
	cout << ans[e];
	
	return 0;
}




# 플로이드-와샬
for (int k = 1; k <= n; k++) {
	for (int i = 1; i <= n; i++) {
		if (i == k) continue;
		for (int j = 1; j <= n; j++) {
			if (i == j || k == j) continue;
			buf[i][j] = min(buf[i][j], buf[i][k] + buf[k][j]);
		}
	}
}

for (int k = 1; k <= n; k++) {
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			buf[i][j] = min(buf[i][j], buf[i][k] + buf[k][j]);
		}
	}
}




# 벨만-포드
vector<pair<int, pii>> v;
ll ans[1000];
int main() {
	fill(ans, ans + 1000, 1e9);
	cin >> n >> m;
	rep(i, m) {
		int a, b, w;
		cin >> a >> b >> w;

		// w 는 가중치
		v.push_back({w, {a, b}});
	}

	ans[1] = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < v.size(); j++) {
			int a = v[j].second.first;
			int b = v[j].second.second;
			int w = v[j].first;

			if (ans[a] >= 1e9) continue;
			if (ans[b] > ans[a] + w) {
				ans[b] = ans[a] + w;
			}
		}
	}

	// 한번 더 돌릴때 값을 수정(더 짧은 거리가 발견됨) => 음수 사이클이 존재
	bool pass = true;
	for (int i = 0; i < n && pass; i++) {
		for (int j = 0; j < v.size() && pass; j++) {
			int a = v[j].second.first;
			int b = v[j].second.second;
			int w = v[j].first;

			if (ans[a] >= 1e9) continue;
			if (ans[b] > ans[a] + w) {
				pass = false;
				break;
			}
		}
	}

	// ... 정답 출력 부분
}




# 세그먼트 트리
ll buf[4000000];
int start;

int getStart(int n) {
	int start = 1;
	while (start < n) start *= 2;
	return start;
}

void insert(int idx, ll val) {
	idx = start + idx;
	while (idx != 0) {
		buf[idx] += val;
		idx /= 2;
	}
}

void setData(int idx, ll val) {
	idx = start + idx;
	val = val - buf[idx];

	while (idx != 0) {
		buf[idx] += val;
		idx /= 2;
	}
}

ll solve(int idx, ll nl, ll nr, ll left, ll right) {
	if (left <= nl && nr <= right)
		return buf[idx];

	if (nr < left) return 0;
	if (nl > right) return 0;

	ll v1 = solve(idx * 2, nl, (nl + nr) / 2, left, right);
	ll v2 = solve(idx * 2 + 1, (nl + nr) / 2 + 1, nr, left, right);

	return v1 + v2;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	int n, m1, m2; cin >> n >> m1 >> m2;

	start = getStart(n);

	rep(i, n) {
		ll tmp; cin >> tmp;
		insert(i, tmp);
	}
	
	rep(i, m1 + m2) {
		int tmp; cin >> tmp;
		ll b, c; cin >> b >> c;
		if (tmp == 1) {
			setData(b - 1, c);
		}
		else {
			cout << solve(1, 0, start - 1, b - 1 , c - 1) << endl;
		}
	}
	
	return 0;
}




# 소수점 출력 # 자리수 출력 # 자릿수 출력 # precision
cout<<fixed;
cout.precision(7);
7자리 까지 출력




# 정규식 # regex # replace
#include <bits/stdc++.h>
using namespace std;

int solution(string s) {
    s = regex_replace(s, regex("zero"), "0");
    s = regex_replace(s, regex("one"), "1");
    s = regex_replace(s, regex("two"), "2");
    s = regex_replace(s, regex("three"), "3");
    s = regex_replace(s, regex("four"), "4");
    s = regex_replace(s, regex("five"), "5");
    s = regex_replace(s, regex("six"), "6");
    s = regex_replace(s, regex("seven"), "7");
    s = regex_replace(s, regex("eight"), "8");
    s = regex_replace(s, regex("nine"), "9");    
    return stoi(s);
}





# string replace # string::npos
int solution(string s) {
    string arr[10] = {"zero","one","two","three","four","five","six","seven","eight","nine"};
    for(int i = 0; i < 10; i++){
        while(true){
            auto it = s.find(arr[i]);
            if(it == string::npos) break;
            s.replace(it, arr[i].size(), to_string(i));
        }
    }
    return stoi(s);
}